#version 120

//  Lame fire

uniform   float time;      //  Time
//uniform   vec3  pos;       //  Initial position
attribute float Start;     //  Start time
attribute vec3  Vel;       //  Initial velocity
uniform sampler3D Noise3D; //  Noise texture
uniform mat4 model;

//  Perlin noise function
float noise(vec3 X)
{
   vec4 nv = texture3D(Noise3D,X);
   return nv[0]+nv[1]+nv[2]+nv[3]+0.03135;
}
bool collision()
{
	return true;
}

void main(void)
{
	
   //  Particle life and radius of circle
   float t = mod(time,Start);
   float r=2.5;
   //  Initial conditions
   vec3 vert = (model*gl_Vertex).xyz;                                          //positions
   vec3 vel=Vel;
   vec3 color=gl_Color.rgb;                                            //Color
   float start= Start;  
   bool flag=false;
   
   //simulation
   vel+= vec3(r*(cos(time-t)),1.0,r*(sin(time-t)));                                                      //velocity
   //Noisy Movement
   vec3 X=vel+color;//vec3(r*(cos(time)-1.0),0.0,r*(sin(time)-1.0))+color;
   //vel.x += noise(X);
   //vel.y += noise(X);
   //vel.z += noise(X);
   
   if(vert.y<0.0 && flag==false)
   {
	   flag=true;
	   vel=-vel;
   }  
   if(vert.y>0.0)
   {
	   flag=false;
   }
   vert+=vel;
   //  Noisy yellow trending to red
   gl_FrontColor = vec4(1,color.b-0.2*vert.y,0,1);
   //  Transform particle location
   gl_Position = gl_ModelViewProjectionMatrix*vec4(vert,1.0);
}
