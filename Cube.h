//
//  Cube class
//  The constructor sets the position, size and rotation
//  All parameters are assigned default values
//
#ifndef CUBE_H
#define CUBE_H

#include "Object.h"

class Cube: public Object
{
private:
   float sx,sy,sz;  //  Dimensions in X/Y/Z directions
   float tx,ty,tz;  //  Positions  in X/Y/Z directions
   QOpenGLBuffer   cube_buffer;  //  Vertex buffer
   static const int cube_size=36;
   QOpenGLTexture* texture;
   const float cube_data[36*18] =  // Vertex data
   {
		//  X  Y  Z  W   Nx Ny Nz    R G B   s t   Tx Ty Tz    Bx By Bz
		//  Front
		+1,+1,+1,+1,     0, 0,+1,    1,0,0,  1,1,   1, 0, 0,    0, 1, 0,
		-1,+1,+1,+1,     0, 0,+1,    1,0,0,  0,1,   1, 0, 0,    0, 1, 0,
		+1,-1,+1,+1,     0, 0,+1,    1,0,0,  1,0,   1, 0, 0,    0, 1, 0,
		+1,-1,+1,+1,     0, 0,+1,    1,0,0,  1,0,   1, 0, 0,    0, 1, 0,
		-1,+1,+1,+1,     0, 0,+1,    1,0,0,  0,1,   1, 0, 0,    0, 1, 0,
		-1,-1,+1,+1,     0, 0,+1,    1,0,0,  0,0,   1, 0, 0,    0, 1, 0,
		//  Back
		+1,-1,-1,+1,     0, 0,-1,    0,0,1,  0,0,  -1, 0, 0,    0,-1, 0,
		-1,-1,-1,+1,     0, 0,-1,    0,0,1,  1,0,  -1, 0, 0,    0,-1, 0,
		
		-1,+1,-1,+1,     0, 0,-1,    0,0,1,  1,1,  -1, 0, 0,    0,-1, 0,
		+1,-1,-1,+1,     0, 0,-1,    0,0,1,  0,0,  -1, 0, 0,    0,-1, 0,
		-1,+1,-1,+1,     0, 0,-1,    0,0,1,  1,1,  -1, 0, 0,    0,-1, 0,
		+1,+1,-1,+1,     0, 0,-1,    0,0,1,  0,1,  -1, 0, 0,    0,-1, 0,
		//  Right
	   +1,+1,+1,+1,     +1, 0, 0,    1,1,0,  0,1,   0, 1, 0,    0, 0, 1,
	   +1,-1,+1,+1,     +1, 0, 0,    1,1,0,  0,0,   0, 1, 0,    0, 0, 1,
	   +1,+1,-1,+1,     +1, 0, 0,    1,1,0,  1,1,   0, 1, 0,    0, 0, 1,
	   +1,+1,-1,+1,     +1, 0, 0,    1,1,0,  1,1,   0, 1, 0,    0, 0, 1,
	   +1,-1,+1,+1,     +1, 0, 0,    1,1,0,  0,0,   0, 1, 0,    0, 0, 1,
	   +1,-1,-1,+1,     +1, 0, 0,    1,1,0,  1,0,   0, 1, 0,    0, 0, 1,
	   //  Left
	   -1,+1,+1,+1,     -1, 0, 0,    0,1,0,  1,1,   0,-1, 0,    0, 0,-1,
	   -1,+1,-1,+1,     -1, 0, 0,    0,1,0,  0,1,   0,-1, 0,    0, 0,-1,
	   -1,-1,+1,+1,     -1, 0, 0,    0,1,0,  1,0,   0,-1, 0,    0, 0,-1,
	   -1,-1,+1,+1,     -1, 0, 0,    0,1,0,  1,0,   0,-1, 0,    0, 0,-1,
	   -1,+1,-1,+1,     -1, 0, 0,    0,1,0,  0,1,   0,-1, 0,    0, 0,-1,
	   -1,-1,-1,+1,     -1, 0, 0,    0,1,0,  0,0,   0,-1, 0,    0, 0,-1,
	   //  Top
	   +1,+1,+1,+1,      0,+1, 0,    0,1,1,  1,0,   1, 0, 0,    0, 0, 1,
	   +1,+1,-1,+1,      0,+1, 0,    0,1,1,  1,1,   1, 0, 0,    0, 0, 1,
	   -1,+1,+1,+1,      0,+1, 0,    0,1,1,  0,0,   1, 0, 0,    0, 0, 1,
	   -1,+1,+1,+1,      0,+1, 0,    0,1,1,  0,0,   1, 0, 0,    0, 0, 1,
	   +1,+1,-1,+1,      0,+1, 0,    0,1,1,  1,1,   1, 0, 0,    0, 0, 1,
	   -1,+1,-1,+1,      0,+1, 0,    0,1,1,  0,1,   1, 0, 0,    0, 0, 1,
	   //  Bottom
	   -1,-1,-1,+1,      0,-1, 0,    1,0,1,  0,0,  -1, 0, 0,    0, 0,-1,
	   +1,-1,-1,+1,      0,-1, 0,    1,0,1,  1,0,  -1, 0, 0,    0, 0,-1,
	   -1,-1,+1,+1,      0,-1, 0,    1,0,1,  0,1,  -1, 0, 0,    0, 0,-1,
	   -1,-1,+1,+1,      0,-1, 0,    1,0,1,  0,1,  -1, 0, 0,    0, 0,-1,
	   +1,-1,-1,+1,      0,-1, 0,    1,0,1,  1,0,  -1, 0, 0,    0, 0,-1,
	   +1,-1,+1,+1,      0,-1, 0,    1,0,1,  1,1,  -1, 0, 0,    0, 0,-1
	   };
public:
   Cube(const QString tex="");                 //  Constructor
   void setRotationAngle(int nth);             //  Set angle
   void setFireAngle(int nph);                 //  Set angle
   void display();                             //  Render the cube
};

#endif
